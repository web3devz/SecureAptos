import React, { useState } from 'react';
import { useAppContext } from '../context/AppContext';
import ContractSelector from '../components/ContractSelector';
import VulnerabilityCard from '../components/VulnerabilityCard';
import { Search, AlertTriangle, CheckCircle, XCircle } from 'lucide-react';

const VulnerabilityDetection: React.FC = () => {
  const { selectedContract, addVulnerability, vulnerabilities, updateContract, addReport } = useAppContext();
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisComplete, setAnalysisComplete] = useState(false);
  
  const contractVulnerabilities = selectedContract 
    ? vulnerabilities.filter(v => v.contractId === selectedContract.id)
    : [];

  const handleAnalyzeContract = async () => {
    if (!selectedContract) return;
    
    setIsAnalyzing(true);
    setAnalysisComplete(false);
    
    try {
      // Simulate API call to backend for analysis
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // Mock vulnerabilities based on common Move contract issues
      const mockVulnerabilities = [
        {
          contractId: selectedContract.id,
          type: 'Unauthorized Access',
          severity: 'critical' as const,
          description: 'The contract does not properly check authorization for critical operations.',
          location: 'MyModule::transfer_tokens',
          recommendation: 'Implement proper access control checks using Aptos account-based authentication.'
        },
        {
          contractId: selectedContract.id,
          type: 'Resource Leak',
          severity: 'high' as const,
          description: 'Resources are not properly handled, potentially leading to locked assets.',
          location: 'MyModule::initialize',
          recommendation: 'Ensure all resources are properly created and destroyed.'
        },
        {
          contractId: selectedContract.id,
          type: 'Integer Overflow',
          severity: 'medium' as const,
          description: 'Arithmetic operations do not check for potential overflows.',
          location: 'MyModule::calculate_rewards',
          recommendation: 'Use Move\'s checked arithmetic operations or implement bounds checking.'
        },
        {
          contractId: selectedContract.id,
          type: 'Reentrancy',
          severity: 'low' as const,
          description: 'Potential reentrancy vulnerability in external calls.',
          location: 'MyModule::external_interaction',
          recommendation: 'Implement checks-effects-interactions pattern and use reentrancy guards.'
        }
      ];
      
      // Add mock vulnerabilities
      mockVulnerabilities.forEach(vuln => {
        addVulnerability(vuln);
      });
      
      // Update contract status
      updateContract(selectedContract.id, {
        status: 'analyzed'
      });
      
      // Create a mock report
      addReport({
        contractId: selectedContract.id,
        createdAt: new Date().toISOString(),
        vulnerabilities: mockVulnerabilities,
        riskScore: 65,
        summary: 'The contract has several security issues that need to be addressed before deployment to production.'
      });
      
      setAnalysisComplete(true);
    } catch (error) {
      console.error('Analysis failed:', error);
    } finally {
      setIsAnalyzing(false);
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-6">Vulnerability Detection</h1>
      
      <ContractSelector />
      
      {selectedContract && (
        <div className="mb-6">
          <div className="bg-white rounded-lg shadow-md p-4 mb-4">
            <h2 className="text-lg font-semibold mb-2">{selectedContract.name}</h2>
            <div className="bg-gray-50 p-4 rounded-md mb-4">
              <pre className="text-sm font-mono overflow-x-auto whitespace-pre-wrap">
                {selectedContract.code}
              </pre>
            </div>
            <button
              onClick={handleAnalyzeContract}
              disabled={isAnalyzing}
              className={`py-2 px-4 rounded-md text-white font-medium flex items-center ${
                isAnalyzing ? 'bg-gray-400 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700'
              }`}
            >
              {isAnalyzing ? (
                <>
                  <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns="http://www.w3.org/2000/svg\" fill="none\" viewBox="0 0 24 24">
                    <circle className="opacity-25\" cx="12\" cy="12\" r="10\" stroke="currentColor\" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Analyzing...
                </>
              ) : (
                <>
                  <Search className="h-5 w-5 mr-2" />
                  Analyze Contract
                </>
              )}
            </button>
          </div>
          
          {analysisComplete && (
            <div className="bg-white rounded-lg shadow-md p-4">
              <div className="flex items-center mb-4">
                <AlertTriangle className="h-6 w-6 text-yellow-500 mr-2" />
                <h2 className="text-lg font-semibold">Analysis Results</h2>
              </div>
              
              <div className="mb-4">
                <div className="flex items-center justify-between bg-gray-50 p-4 rounded-md">
                  <div>
                    <p className="text-sm font-medium text-gray-700">Security Score</p>
                    <p className="text-2xl font-bold text-gray-900">35/100</p>
                  </div>
                  <div className="flex space-x-4">
                    <div>
                      <p className="text-sm font-medium text-gray-700">Critical</p>
                      <p className="text-xl font-bold text-red-600">{contractVulnerabilities.filter(v => v.severity === 'critical').length}</p>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-700">High</p>
                      <p className="text-xl font-bold text-orange-600">{contractVulnerabilities.filter(v => v.severity === 'high').length}</p>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-700">Medium</p>
                      <p className="text-xl font-bold text-yellow-600">{contractVulnerabilities.filter(v => v.severity === 'medium').length}</p>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-700">Low</p>
                      <p className="text-xl font-bold text-blue-600">{contractVulnerabilities.filter(v => v.severity === 'low').length}</p>
                    </div>
                  </div>
                </div>
              </div>
              
              <div>
                <h3 className="text-md font-semibold mb-3">Detected Vulnerabilities</h3>
                {contractVulnerabilities.length > 0 ? (
                  contractVulnerabilities.map((vuln) => (
                    <VulnerabilityCard
                      key={vuln.id}
                      type={vuln.type}
                      severity={vuln.severity}
                      description={vuln.description}
                      location={vuln.location}
                      recommendation={vuln.recommendation}
                    />
                  ))
                ) : (
                  <div className="bg-green-50 border border-green-200 rounded-md p-4 flex items-start">
                    <CheckCircle className="h-5 w-5 text-green-500 mr-2 mt-0.5" />
                    <p className="text-green-800">No vulnerabilities detected. Your contract appears to be secure.</p>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      )}
      
      {!selectedContract && (
        <div className="bg-white rounded-lg shadow-md p-6 text-center">
          <div className="mb-4">
            <Search className="h-12 w-12 text-gray-400 mx-auto" />
          </div>
          <h2 className="text-xl font-semibold mb-2">No Contract Selected</h2>
          <p className="text-gray-600 mb-4">
            Please select a contract from the dropdown above or create a new one in the Contract Deployment section.
          </p>
        </div>
      )}
    </div>
  );
};

export default VulnerabilityDetection;